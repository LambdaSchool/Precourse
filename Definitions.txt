---
1. Feynman Writing Prompts - In a seprate text file that you create, write out explanations of the following concepts like you are explaining it to a 12 year old.  Doing this will help you quickly discover any holes in your understanding.  Ask your questions on Slack.
		
	* Variables - two categories of 'variables' exist: those that will not change and those that will change.  Those that will not change are called constants and once they are defined, they will continue to be defined as such throughout the program.  For example, once you get a name when you're born, it does not change (taking out marriage and witness protection).  You will always be known be your name.  The other type of variable is one that CAN change throughout a program.  For example, your grade in school now is known as 7th grade, but in a year you will be in 8th grade.  Redefining the variable until a NEW redefinition is introduced.  These variables are then used in different functions in programs.
	
    * Strings - simple written text.  Normally something you're trying to show a user of a program.  Often times easily understood by the user, except in those times that an engineer is speaking to a smaller group of IT professionals (for error messages to help them fix a computer).  Otherwise, strings are those words, sentences, and paragraphs that are meant to be read by normal humans in a normal text format.

	* Functions (arguments, `return`) - small engines that exist within a program.  You put variables, text, and other things into one side of the function and on the other side comes out an answer or redefined variable, text, or object.  Like a normal cash transaction at a Starbucks.  When you give the cashier money for coffee, you are going through a transaction, that money is substituted for coffee.  At that end of the moneyCoffee function, you get coffee, but have done so at the cost of money.

	* `if` statements - forks in the road.  Think about anytime you had a decision in life and that can roughly be boiled down to an 'if' statement.  If statements look at specific variables and inputs and determine which way a program should go.  Oftentimes these statements can be reduced to whether a number is greater, less than, or equal to another number.  For example, if you run more than 5 miles today you can go to Jenni's Icecream.  If you run less than 5 miles today - no Jenni's Icecream.

	* Boolean values (`true`, `false`) - switches at the forks in the road.  Booleans help reduce arguments, 'if' statements, and input to a simple 'true'/'false', 'yes'/'no', etc.  We can bring a whole program of code down to a 'yes this works fine' or 'no it's broken' by defining arguments in such a way that it all calculates to a boolean value.