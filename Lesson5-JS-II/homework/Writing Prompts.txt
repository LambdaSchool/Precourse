# for loops

A "for" loop tells the program to keep on doing some piece of code until you tell it to quit. In order for that to work, you need to tell it when to quit. The first way is to tell it specifically when it should quit, by giving it some test. The most normal way this test works is that a "counter" variable is created, and everytime the loop runs, the "counter" variable is increased or decreased. You then set the "for" loop to quit repeating the code when the counter reaches some specified value. So you could set the counter to 0, and increase it by 1 each time, and then have the loop stop repeating once the counter got to 6. That way, the loop would have run 6 times. You can give the "for" loop the initial counter value, the condition when it should stop running, as well as telling it how to change the counter value after each time it runs. This is an optional approach though. You can just give it a simple condition of when it should stop running, and not worry about a counter at all. 

The second way to do a for loop is to not give it any instructions about when to quit at the beginning, and then just tell it to quit running somewhere in the actual code you want it to run. That can be done fairly simply just by writing the "break" command in the code. Once the program sees the break command, it will exit the loop. Most of the time though, you would want to just use the first method.

* '&&', 'II', '!'

These are logical operators. The first one means "and", the second means "or", and the third means "not". The computer handles them in a very simple way. The && and || will look at what's on either side of them, and give a true or false response based on those. The ! will just look at what comes after it. The statements on either side of && and ||, or right after the !, are called expressions. The program will evaluate the expressions to determine whether they count as "true" or "false". The program will sometimes really stretch to figure out whether something if true or false, even if it doesn't make sense, so you'll have to be really clear about what the expression is testing for. Once the program determines whether the expressions are true or false, the rests is pretty easy. 

If both expressions are true for && ("and"), then && will be true, and if either is false, then && will be false. This is the same way you use and. If you say "John is fat and Sally is skinny", that is only true if John actually is fat, and Sally is skinny. For the computer, John is fat and Sally is skinny would be the expressions, and it would need to determine whether they are true to decide whether the full sentence is true.

For || ("or"), if either expression is true, then || will be true. If both expressions are false, then || will be false. This is pretty much how we use "or" in English, except sometimes we mean that only one of the expressions can be true. When Bill says "The light has gone out, or I must be be blind," he means that the lights can't have gone out and he is blind. So if both the lights had gone out, and Bill is blind, then we would figure what he'd said was false. The "or" that || refers to is NOT that kind of "or". If I say "I heard gunshots or I heard fireworks", that would be true even if I had actually heard gunshots at the same time as the fireworks. The javascript command || works more like the firework, gunshot example.

For ! ("not"), whether it is true or false is just the opposite of whatever the expression is. This is just like English. If I say, He's not six feet tall, then this is false if he is six feet fall, but it's true if he really isn't six feet tall. In this case, the expression would be John is six feet tall, and we are just making it the opposite by adding not. In practice, this is very easy. Just look at the expression following !, and figure out whether it's true or not. Whether it's true or false, just make the ! show the opposite.


 