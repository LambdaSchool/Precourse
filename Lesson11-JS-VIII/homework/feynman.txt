Recursion

Recursion is when you call a function inside of itself. It is useful when you want the function to do the same thing over and over until a condition is met. One useful feature of recursion is that every new iteration makes a new function nested within the previous. Therefore when you finally hit your stop condition and return out, you're returning out of the lowest level function and then you travel back up again.  In the Fibonacci number problem, this property was used to take advantage of the fact that we couldn't know the value of a number at a particular point in the Fibonacci sequence off the bat, but as we drilled down we built up the relationship that each new number would be made of adding the previous two. Then we hit our stop condition which meant we had gone through the recursion the number of times equal to the number inputted. This then returned one.  Then the function returned back up through all the levels using the previously established relationship to construct a Fibonacci sequence as it went back up, ending at the highest function where we had hit the point in the sequence corresponding to the number inputted.