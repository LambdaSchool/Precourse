Lesson 4 Writing Prompts

	* Variables
	In your room you have two boxes, one labeled "toys", one labeled "clothes."  When you clean up, you put the toys in the toy basket and the clothes in the clothes basket. The label on the box is like the variable name, and the specific items in the box are the value it holds.  So for example you could have a variable named "clothes", and in it you put the value of "3 socks and a hat." Now, in some houses (programming languages), they insist you put clothes in the clothes box and toys in the toys box (strict typing).  But Javascript is a much more forgiving guardian.  You can put whatever you want in the boxes.  You can put a book in the clothes bin!  You can also change the labels, perhaps to "clothesAndBook".  The bins are just tools to help you organize your items/values, you decide how to use them.  Then you can put the bins to use:  if I say "bring me the box labeled 'clothes'", you bring me one box, but it contains six socks, a book and a shirt.  

	* Strings
A "string" is just a fancy way of saying "words and symbols other than numbers."  You put a String in quotes.  So 'hello!' is a string and '!' is a string.  But 24 is not a string, it's a number.  Now, what if you put a number in quotes?  Is it still a number or is it now a string?  It's a string, because everything in the quotes is something you would want to read out, like words on a page.  So if you see '24+3' Javascript would just print out the characters "24+3".  But if you saw 24+3, without the quotes, Javascript would do the math and say 27.


	* Functions (arguments, `return`)
Functions are like machines that take in information, called arguments, do something with it, and spit out an answer to the wider world, called "returning a value".  It's like if you had a machine that made smoothies: you would insert arguments such as carrots, papaya and milk, and it would mix them up into a smoothie for you.  As long as you were putting in food that could be made into a smoothie, you could put in whatever you want. Functions are like that.  Maybe we have a function that takes in numbers as arguments and returns the result of those numbers added together. Or we have one that takes some words and capitalizes them.  Or one that takes in a password and tells us if it's valid or not.

	* `if` statements
An if statement is a fork in a road: if one thing is true you go one way, if another is true you go another way.  You can have as many options as you want.  For example, "if you have ice cream, you will get an ice-cream headache, but if you eat pickles you will get thirsty, but if you eat carrots you will grow big and strong."  You can write the same thing for a computer program, for example "if the user puts in a valid password, let them into the website.  If it's too short, say 'too short', if too long, say 'too long', if it's the wrong password say 'wrong password.'"  This way the computer can make decisions about what to do based on the circumstances.

	* Boolean values (`true`, `false`)
Something is either True of False to Javascript.  Think about how computers think in ones and zeroes: a zero is false and a one is true.  When you put a condition in an if statement, Javascript looks at it to see if it is true or not.  If it's true, you do whatever goes with that step. If false, you go on and look at the next condition.  So in our example above, if it's false that you're having ice cream, the computer goes on to check and see if you're having pickles.  If you're not having pickles, it goes on to check carrots and so on.  Javascript knows the truth is out there and will keep looking all the way through your if statement to see if it can find something true.  If it can't find anything, it doesn't do anything, so it's a good idea to have a "catch-all" which will be true, such as "if you eat anything else, congratulations at least you ate."
