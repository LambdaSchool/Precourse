* Variables
	* Strings - Strings can be any character (or characters) written inside quotes. A string can also be a space, so a string can be 0 characters, as well.
	* Functions (arguments, `return`) - A function is a block of code that is capable of being executed, but it can’t do that by itself. It needs arguments: one or multiple variables that are passed along to the function. When the function executes, it executes based on the arguments – that is what creates diversity on what the results of running the function end up being. These arguments can vary greatly. For example, if x can represent any age, some possible arguments would be 15, 88, or even 250 because an argument greatly varies depending on what type of task you want your function to perform. But even if you have a function set and your arguments determined, you will still not get anything to run without the ‘return’ statement. The ‘return’ statement is what allows your function to actually do what it was created for. The ‘return’ statement invokes (or calls) the function so it can get to work!
	* `if` statements – An ‘if’ statement is a conditional statement. What that means is that when you type out an ‘if’ statement, you are setting up some conditions that if proved true (based on the arguments you input), will run a certain response. This is a really good tool if you need to sort through data (or trying to make analyzing a large chunk of data a little easier and more straightforward).  So, with an ‘if’ statement, you set up your conditions first: ‘if’ x < 10, for example. Then, inside a set of open brackets, you set up what will be the response when you run your ‘if’ statement, so if x is 2 (an argument), which is less than 10, you can be simple and type print “true” or you can choose another way of saying it: print “That’s absolutely correct” as the response that will be invoked. You also set this up if the condition isn’t met. So, if x is 500, you type what the response to argument will be outside that first set of brackets: print “That’s not quite right!”
	* Boolean values (`true`, `false`) – Boolean values are simply the two ends of a spectrum: yes or no, true or false, 0 or 1 like in binary code. 
