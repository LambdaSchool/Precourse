for -  a for statement is used when we want to repeat a task or tasks. There are three parts to the statement.  The first part is the counter and we set this counter variable to an initial value.  An example of this would be to set a variable called i to 0 (i = 0).  The second part is the condition or test that we have to pass in order to perform the repeatable task(s). An example of this would be i < 3.  The third part is called the increment. This is just incrementing the value of the counter. An example of this would be i++, using the special increment counter operator.   The number of times that the task(s) are repeated is determined by these three parts.  For example, if we want to repeat a task 3 times we could set the counter variable to an initial value of 1.  We could set the condition as i < 4, and set the increment to i++.  The task(s) would perform the first time, then the counter variable is incremented by one, making the counter's value 2. The condition is then checked and since 2 < 4, the task(s) are performed again.  After this, the increment occurs again, setting the increment variable value to 3.  These steps continue until the condition is false.  In this case the tasks would repeat until the increment variable is set to 4 and the condition is false (4 < 4 is false).  
&& - the && operator is called the AND operator.  It takes two conditions and asks whether they are both true or not.  Only if both conditions are true does the condition pass.  For example, if we have the statement  (1 + 1 = 2) && (2 + 3 = 5) , then the condition passes (ie the entire statement is true).  This is because the two conditions that the && operator evaluates are both true.  For the condition to pass, BOTH sides of the && operator have to be true.  If only one or both sides of the && operator is false, then the entire statement is false.
|| - the || operator is called the OR operator.  It takes two conditions and asks whether one or the other is true or not.  If only one condition is true, then the condition passes.  For example, if we have the statement  (1 + 1 = 5) && (2 + 3 = 5) , then the condition passes (ie the entire statement is true).  This is because at least one of the two conditions that the || operator evaluates is true.  For the condition to pass, at least one side or both sides of the || operator need to be true.  If both sides of the || operator are false, then the entire statement is false.
! - the ! operator is called the NOT operator.  This operator flips the result of a condition.  For example, the condition statement (5 < 4) is false because obviously 5 is not less than 4.  However if I place the NOT operator (!) in front of this condition, then the result becomes true.  !(5 < 4) results in true because the initial result of false is 'flipped' to false by the NOT (!) operator.  