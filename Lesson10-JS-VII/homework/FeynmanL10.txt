Closure - To understand closure, you must first understand scope.  There are different scopes within a program and you can think of scopes as levels of access.  It is similar to a multi floor building with each higher floor representing a higher level of access.  For a javascript program, the first 'floor'/level is called the global scope. Afterwards, each level of access or scope is defined by functions.  For instance if I first create a function X within the global scope, then my function X has a higher level of access than the global scope. What this means is that within function X I can access not only the variables defined within the function itself, but also I can access the variables defined in the global scope.  The reverse isn't true. Since the global scope is at a lower level (at the first level of the building), it does not have access to the function X variables.  Another level of access can be created if I create a function Y defined within my function X.  Now function Y has a higher access (moving up a floor) than function X.  Function Y now has access not only to its own variables, but also to the variable at all levels below, namely the variables within function X and the global scope.  Closure is related to scope but involves a function returning another function that has been created within it.  The function that 'passes out'/returns the function is called the Higher Order Function or the outer function.  The function that is returned can be called the inner function.  The inner function, since it is created within the outer function, has access to the variables defined within the outer function (as well as the global scope variables).  This is important to know because once the call is made to the outer function and that function is executed, this access relationship is set or bound.  For example, I create an outer function called getColorHex that defines a data structure variable that stores color names along with their hex values.  This outer function also returns an inner function that is defined within this outer function.  The inner function has access to the outer functions color/hex data structure since it is inside the outer function.  The inner function can be said to have closure over the outer function due to its higher level of access. The inner function uses the outer function data structure to return the hex value of a particular color.  To illustrate closure, first the getColorHex function is executed. This binds the scope/access relationship between the inner function and the outer function.  Next, the inner function is executed.  Here is where closure is seen. Even though the outer function has completed its execution and the inner function is being executed OUTSIDE of where it was first defined, the inner function still has access to the outer function variable(s).  In this case the inner function continues to have access to the outer function's variable because it has been bound by closure.