
Objects - objects are similar to arrays, they are able to hold multiple pieces of data. the difference is, with arrays you hold multiple pieces of related data, like a bunch of numbers, or a bunch of names. with objects, you use these to hold multiple data of a particular thing, like info(name, email, address) of an individual. the way objects work is you start off the same way as variables and arrays, by letting the computer know that you are about to create one with the keyword const, let, or var. then you are going to write the data inside curlet braces{}. the way the data is written is a little different as well, you will still seperate each piece of data with a comma, but this time, the data will be in pairs, key/value pair, for example name:"beto"


Properties - every object in javascript has properties, in objects, they are pretty much the key/value, they define characteristics of objects. the characteristics are defined by the value. everything has properties, even strings. strings.length is an example, length is a property since it defines the length of the string, a characteristic of it. 


Methods - like properties, everything also has methods. methods are similar to properties, the difference is that methods, are not only characteristics, but functionality of objects, they are pretty much functions(blocks of code) that are associated with objects. you can tell what a method is because a method will end with paranthesis(). for example, arrays also have methods, like array.pop(), pop is a functionality/function that takes off the last piece of data of an array. in objects{}, when you create a function within a object, they are considered methods instead of functions, since it is a function associated to an object. 


Dot notation vs bracket notation - dot notation is the most used way of accessing properties and methods. for example, string.length is an example of dot notation. when it comes to objects{}, you are able to access the key/value with them, for example if you want to access name:'beto' .. you can access it with objectName.name, and that will return 'beto' .. you can also access methods this way, for example, objectName.methodName(), this will call the method associated with the object. there is also a different way of accessing properties of objects{}, and that is with bracket notations, for example, objectName['name'] will also return 'beto' .. this is not a recommended way of accessing them though. the only time you would want to access certain properties with bracket notation is when you are accessing a key/value when it is inside a variable. for example, if you put name:'beto' inside a variable, like const varName = 'name' , you can access the value of 'name' only with a bracket notation, like objectName['varName'], this will look for the 'name' key inside the objectName object and return its value 'beto' .. if you tried that with dot notation, it would not understand what varName is refering to. 